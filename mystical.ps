%!
(dmmlib/base.ps) run
(dmmlib/textbase.ps) run
(dmmlib/lines.ps) run

/code {
    /dot {currentlinewidth 1.5 mul 0 360 arc fill } def
    0 0 1 0 360 arc stroke
    0 0 0.5 180 360 arc
    0 0 0.375 360 180 arcn closepath
    fill
    2 {
        0.375 dup dot
        gsave
            0.375 dup translate
            5 {
                0 0 moveto 4 recip 0 lineto stroke
                45 rotate
            } repeat
        grestore
        -1 1 scale
    } repeat
    [ 0 45 135 180 225 -45 ] {
        gsave
            rotate
            1 0 moveto
            2 0 lineto stroke
        grestore
    } forall
    << /a 1 /b 2 /c 3 >> pop
} cvlit def

/nib_angle -30 def

/nstroke {
    gsave
        nib_angle rotate
        0.5 1 scale
        0.5 callistroke
    grestore
    newpath
} def

(sigils.ps) run
/sigil { /Token arg
    10 dict begin
    /skip_sigil false def
    /otype Token /otype get def
    /xflag Token /xflag get def
    otype /nametype eq {
        xflag not {
            gsave
                3 {
                    -0.75 0 goto
                } circrepeat closepath nstroke
            grestore
        } if
    } if
    otype /arraytype eq {
        /skip_sigil true def
        0 0 goto 5 0 lineto nstroke
        gsave
            5 0 translate
            180 rotate
            Token /ring get draw_ring
        grestore
        xflag {
            0 0 0.125 spcircle whitefill nstroke
        } {
            doot
        } ifelse
    } if
    otype /return ne {
        0.75 softscale
        90 rotate
    } if
    skip_sigil not {
        /literal Token /name get def
        sigil_bank literal known {
            gsave
                sigil_bank literal get exec
            grestore
        } {
            literal buffer cvs centershow
        } ifelse
    } if
    false {
        0 -0.75 translate
        2 recip softscale
        xflag {
            /Times-Bold 0.5 selectfont
        } if
        otype buffer cvs centershow
    } if
    end
} def

/kerning false def
/parsecode {
    10 dict begin
        /code arg       % input code
        /Ring arg       % Ring object to write into, type is set
        
        /code_len code length def
        /components code_len 1 add array def
        /circumference 0.5 def  % leave room for return
        0 1 code_len 1 sub { /i arg
            /Token <<>> def
            components i Token put
            % careful not to execute code piece before cvlit
            code i get
            dup type cvlit /otype arg
            dup xcheck /xflag arg
            cvlit /literal arg
            /aflag otype /arraytype eq def
            literal buffer cvs ([) eq {
            } if

            kerning {
                aflag {
                    0.75
                } {
                    sigil_bank literal known {
                        1.25
                    } {
                        literal buffer cvs stringwidth pop
                    } ifelse
                } ifelse
            } {
                1
            } ifelse
            /width arg
            /position circumference width half add def
            /circumference circumference width add def

            [/otype /xflag /aflag /position] {
                Token exch dup cvx exec put
            } forall

            aflag {
                /inner_ring <<
                    /rtype xflag { /xarray } { /array } ifelse
                >> def
                Token /ring inner_ring put
                inner_ring literal parsecode
                % determine distance
            } {
                Token /name literal put
            } ifelse
        } for
        /end_token <<
            /otype /return
            /xflag false
            /aflag false
            /position circumference 0.5 add
            /name /RETURN
        >> def
        components code_len end_token put
        /circumference circumference 0.5 add def
        /radius circumference PI div half def
        components {
            dup /angle exch
            /position get circumference div 360 mul put
        } forall
        [/components /circumference /radius] {
            Ring exch dup cvx exec put
        } forall
    end
} def

/buffer 100 string def
/Times 0.5 selectfont
/draw_ring { /spell arg
    /rad spell /radius get def
    0 0 rad 0.5 add circle whitefill nstroke
    0 0 rad 0.5 sub circle nstroke
    spell /components get { /Token arg
        gsave
            Token /angle get rotate
            rad 0 translate
            Token sigil
        grestore
    } forall
} def
/mystical {
    10 dict begin
        /input_code arg
        % parse into Ring object
        /spell << /rtype /xarray >> def
        spell input_code parsecode
        spell draw_ring
    end
} def

%%EndProlog
72 softscale
4.25 5.5 translate
-2 0 translate
3 recip softscale
code mystical
code cvx exec
showpage
